#include <WinSock2.h>
#include <iostream>
#pragma comment(lib, "ws2_32")
using namespace std;

typedef struct WSADATA {
    WORD    wVersion;
    WORD    wHighVersion;
    char    szDescription[WSADESCRIPTION_LEN + 1];
    char    szSystemStatus[WSASYS_STATUS_LEN + 1];
    unsigned short iMaxSockets;
    unsigned short iMaxUdpDg;
    char FAR* IpVendorInfo;
} WSADATA, FAR* LPWSADATA;

unsigned long inet_addr(const char* cip);

char* inet_ntoa(struct in_addr in);

typedef struct IN_ADDR {
    union {
        struct { UCHAR s_b1, s_b2, s_b3, s_b4; } S_un_b;
        struct { USHORT s_w1, s_w2; } S_un_w;
        ULONG S_addr;
    } S_un;
#define s_addr  S_un.S_addr
#define s_host  S_un.S_un_b.s_b2
#define s_net   S_un.S_un_b.s_b1
#define s_imp   S_un.S_un_w.s_w2
#define s_impno S_un.S_un_b.s_b4
#define s_lh    S_un.S_un_b.s_b3
} IN_ADDR, * PIN_ADDR, FAR* LPIN_ADDR;



IN_ADDR GetDefaultMyIP();

IN_ADDR GetDefaultMyIP() {
    char localhostname[MAX_PATH];
    IN_ADDR addr = { 0, };

    if (gethostname(localhostname, MAX_PATH) == SOCKET_ERROR) { // 호스트 이름 얻어오기
        return addr;
    }
    HOSTENT* ptr = gethostbyname(localhostname);
    while (ptr && ptr->h_name) {
        
        if (ptr->h_addrtype == PF_INET) {
            memcpy(&addr, ptr->h_addr_list[0], ptr->h_length);
            break;
        }
        ptr++;
    }
    return addr;
}

int main() {
    WSADATA wsadata;
    WSAStartup(MAKEWORD(2, 2), &wsadata);  
    IN_ADDR addr;

    addr = GetDefaultMyIP();
    cout << inet_ntoa(addr) << endl;

    WSACleanup();
    return 0;
}
